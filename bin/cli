#!/bin/bash
# shellcheck disable=2154
#
# ARGBASH_SET_INDENT([  ])
# DEFINE_SCRIPT_DIR([_script_dir])
#
# ARG_OPTIONAL_BOOLEAN([dry-run],[])
#
# ARG_OPTIONAL_SINGLE([env],[],[Env Mode; Required],[unspecified])
# ARG_TYPE_GROUP_SET([envmode],[ENVMODE],[env],[dev,test,prod],[])
# ARG_LEFTOVERS([])
# ARG_HELP([RunCLI],[Run a command line app])
#
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# # When called, the process ends.
# Args:
#   $1: The exit message (print to stderr)
#   $2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
#   test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

# validators

envmode()
{
  local _allowed=("dev" "test" "prod") _seeking="$1"
  for element in "${_allowed[@]}"
  do
    test "$element" = "$_seeking" && echo "$element" && return 0
  done
  die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'dev', 'test' and 'prod'" 4
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
# The positional args array has to be reset before the parsing, because it may already be defined
# - for example if this script is sourced by an argbash-powered script.
_positionals=()
_arg_leftovers=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_dry_run="off"
_arg_env="unspecified"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
  printf '%s\n' "RunCLI"
  printf 'Usage: %s [--(no-)dry-run] [--env <ENVMODE>] [-h|--help] ... \n' "$0"
  printf '\t%s\n' "--env: Env Mode; Required. Can be one of: 'dev', 'test' and 'prod' (default: 'unspecified')"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\n%s\n' "Run a command line app"
}


# The parsing of the command-line
parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      # The dry-run argurment doesn't accept a value,
      # we expect the --dry-run, so we watch for it.
      --no-dry-run|--dry-run)
        _arg_dry_run="on"
        test "${1:0:5}" = "--no-" && _arg_dry_run="off"
        ;;
      # We support whitespace as a delimiter between option argument and its value.
      # Therefore, we expect the --env value, so we watch for --env.
      # Since we know that we got the long option,
      # we just reach out for the next argument to get the value.
      --env)
        test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
        _arg_env="$(envmode "$2" "env")" || exit 1
        shift
        ;;
      # We support the = as a delimiter between option argument and its value.
      # Therefore, we expect --env=value, so we watch for --env=*
      # For whatever we get, we strip '--env=' using the ${var##--env=} notation
      # to get the argument value
      --env=*)
        _arg_env="$(envmode "${_key##--env=}" "env")" || exit 1
        ;;
      # See the comment of option '--dry-run' to see what's going on here - principle is the same.
      -h|--help)
        print_help
        exit 0
        ;;
      # We support getopts-style short arguments clustering,
      # so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
      # After stripping the leading -h from the argument, we have to make sure
      # that the first character that follows coresponds to a short option.
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


# Take arguments that we have received, and save them in variables of given names.
# The 'eval' command is needed as the name of target variable is saved into another variable.
assign_positional_args()
{
  local _positional_name _shift_for=$1
  # We have an array of variables to which we want to save positional args values.
  # This array is able to hold array elements as targets.
  # As variables don't contain spaces, they may be held in space-separated string.
  _positional_names=""
  # If we allow up to infinitely many args, we calculate how many of values
  # were actually passed, and we extend the target array accordingly.
  # We also know that we have _pos_names_count known positional arguments.
  _our_args=$((${#_positionals[@]} - 0))
  for ((ii = 0; ii < _our_args; ii++))
  do
    _positional_names="$_positional_names _arg_leftovers[$((ii + 0))]"
  done

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

# Now call all the functions defined above that are needed to get the job done
parse_commandline "$@"
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }
# Validation of values


### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#
readonly script_dir="$_script_dir"
source "$script_dir/_utils.sh"

readonly climain="./packages/services/dist/src/cli"
arg env

export NODE_ENV="$env"
doit node "$climain" "${_arg_leftovers[@]}"

# ] <-- needed because of Argbash

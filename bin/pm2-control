#!/bin/bash
# shellcheck disable=2154

# Created by argbash-init v2.10.0
# DEFINE_SCRIPT_DIR([_script_dir])
# ARG_OPTIONAL_ACTION([rebuild-script],[],[Rebuild this script (requires argbash installed)],[do_rebuild_script])
# ARG_OPTIONAL_ACTION([reset],[],[stop/flush logs/del all],[pm2_reset])
# ARG_OPTIONAL_BOOLEAN([verbose])
# ARG_OPTIONAL_BOOLEAN([dry-run])
# ARG_HELP([PM2 Control],[Wrapper around PM2 start/stop/etc.])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_PREPARE()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


# # When called, the process ends.
# Args:
#   $1: The exit message (print to stderr)
#   $2: The exit code (default is 1)
# if env var _PRINT_HELP is set to 'yes', the usage is print to stderr (prior to $1)
# Example:
#   test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
die()
{
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}


# Function that evaluates whether a value passed to it begins by a character
# that is a short option of an argument the script knows about.
# This is required in order to support getopts-like short options grouping.
begins_with_short_option()
{
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose="off"
_arg_dry_run="off"


# Function that prints general usage of the script.
# This is useful if users asks for it, or if there is an argument parsing error (unexpected / spurious arguments)
# and it makes sense to remind the user how the script is supposed to be called.
print_help()
{
  printf '%s\n' "PM2 Control"
  printf 'Usage: %s [--rebuild-script] [--reset] [--(no-)verbose] [--(no-)dry-run] [-h|--help]\n' "$0"
  printf '\t%s\n' "--rebuild-script: Rebuild this script (requires argbash installed)"
  printf '\t%s\n' "--reset: stop/flush logs/del all"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\n%s\n' "Wrapper around PM2 start/stop/etc."
}


# The parsing of the command-line
parse_commandline()
{
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      # The rebuild-script argurment doesn't accept a value,
      # we expect the --rebuild-script, so we watch for it.
      --rebuild-script)
        do_rebuild_script
        exit 0
        ;;
      # See the comment of option '--rebuild-script' to see what's going on here - principle is the same.
      --reset)
        pm2_reset
        exit 0
        ;;
      # See the comment of option '--rebuild-script' to see what's going on here - principle is the same.
      --no-verbose|--verbose)
        _arg_verbose="on"
        test "${1:0:5}" = "--no-" && _arg_verbose="off"
        ;;
      # See the comment of option '--rebuild-script' to see what's going on here - principle is the same.
      --no-dry-run|--dry-run)
        _arg_dry_run="on"
        test "${1:0:5}" = "--no-" && _arg_dry_run="off"
        ;;
      # See the comment of option '--rebuild-script' to see what's going on here - principle is the same.
      -h|--help)
        print_help
        exit 0
        ;;
      # We support getopts-style short arguments clustering,
      # so as -h doesn't accept value, other short options may be appended to it, so we watch for -h*.
      # After stripping the leading -h from the argument, we have to make sure
      # that the first character that follows coresponds to a short option.
      -h*)
        print_help
        exit 0
        ;;
      *)
        _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
        ;;
    esac
    shift
  done
}

# Call the function that assigns passed optional arguments to variables:
#  parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
_script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || { echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2; exit 2; }

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# shopt -s extglob
# set -euo pipefail

script_basename=$(basename "$0")

## Assign parsed args to prettier variables
readonly script_dir=$_script_dir
readonly dryrun=$_arg_dry_run
readonly verbose=$_arg_verbose

####
## Run the given command, allowing for --dry-run option to just print the command
doit() {
    local cmds=("$@")
    if [ "$dryrun" = on ]; then
        echo "dry> ${cmds[*]}"
    else
        echo "run> ${cmds[*]}"
        "${cmds[@]}"
    fi

    echo ""
}

####
## CD into dirs, verbosely failing on first non-existent dir
with_dirs() {
    local dirnames=("$@")
    for d in "${dirnames[@]}"; do
        if [ ! -d "$d" ]; then
            #   test -f "$_arg_infile" || _PRINT_HELP=yes die "Can't continue, have to supply file as an argument, got '$_arg_infile'" 4
            echo "could not cd to '$d' in ${dirnames[*]}"
            exit 1
        fi
        cd "$d" || exit 1
    done
    echo "In dir: $(pwd)"
}

####
## Convenience function to regenerate this script from argbash source (*.m4)
do_rebuild_script() {
    echo "Rebuilding script.."
    with_dirs "$script_dir"
    argbash "$script_basename.m4" -c -o "$script_basename"
}



pm2_reset() {
    doit pm2 stop all
    doit pm2 flush
    doit pm2 delete all
}

# --reset
#  pm2 stop all && pm2 flush && pm2 del all

# --start
#  pm2 start dist/src/pm2/service-ecosystem.config.js --env=dev && pm2 logs

# --fresh-start = --reset + --start


# --logs [service]
#  pm2 logs --nostream  --lines 100000
#  pm2 start all
#  pm2 logs
#  pm2 stop all
#  --status
#  pm2 status

# if [ "$download" = on ]; then
#     echo "Downloading Python"
#     download_python
#     unpack_python
# fi


#########################
## Run Main
#########################
parse_commandline "$@"

## Print help if no other action has been taken
_PRINT_HELP=yes die "" 1

# ] <-- needed because of Argbash

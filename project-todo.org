** List project plan for current task

** TASK Modify openreview note fetcher to use '?after=' param
*** Fetch Service
- [-] Modify runRelayFetch logic to store and use last known noteId (most recently fetched).
  - [X] Implement a note iterator/generator with a limit count
  - [ ] Use named cursor
    e.g., 'front/abstract', 'rear/*'
  - [ ] Store note nums in db such that it is easy to tell if there are gaps in our fetched list
    - e.g., forward note cursor, reverse note cursor
    - this would mean including all nums, including those we can't use (marked as 'unusable' or something)
  - [ ] Run fetching w/ sort num:asc
- [ ] Create logic to re-run fetch for all papers
  - [ ] Use named cursors, stored in mongodb
- [X] Create test plan
  - [X] Run against live site w/dev config
  - [X] Run against mocked api
    - [X] Koa-based api mimicking openreview
      - [X] /login api mockup
      - [X] /notes api mockup
  - [X] Profile and report api fetch times
- [ ] Delete downloaded htmls/artifacts when done
- [ ] Delete /tmp files created by chrome
- [ ] Reap dead chrome instances



** Next Actions
- [ ] Create top-level fetch loops, parameterized for different cursors

- [X] Create FieldStatus collection, store abs/pdf attempts/status/value-hash individually
- [X] Create cursor collection
- [X] add 'number' field to note
- [ ] Create mongo migration


** Ideas
- keep track of slow extraction ids
- Fetch should only hit openreview api 1 time.
  - keep track of hash of extracted fields, make note of
    when they change
  - re-extracting from the beginning is a local-only operation,
    make a log record when updates should/do happen

** Cursor design/implementation
*** Cursor is (noteId, role)
*** Fetch Cursor
*** Extraction Cursor filters
**** abstract/pdf-link/both
**** just process certain domains
- Use url_status responseUrl to avoid redirect issues
*** Operations
**** Worker locks/owns current cursor
**** Worker unlocks cursor
**** Worker advances cursor to next available note
